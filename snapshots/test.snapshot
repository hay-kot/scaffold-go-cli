cli-test:  (type=dir)
	.github:  (type=dir)
		ISSUE_TEMPLATE:  (type=dir)
			bug_report.yml:  (type=file)
				---
				name: Bug Report
				description: "Submit a bug for the latest version"
				title: "YOUR DESCRIPTIVE TITLE GOES HERE"
				labels: ["bug", "triage"]
				body:
				  - type: checkboxes
				    id: checks
				    attributes:
				      label: First Check
				      description: |
				        Please confirm and check all the following prior to submission. If you do not do this, your
				        issue may be closed.
				      options:
				        - label: This is not a feature request.
				          required: true
				        - label: I added a very descriptive title to this issue (title field is above this).
				          required: true
				        - label: I used the GitHub search to find a similar issue and didn't find it.
				          required: true
				  - type: textarea
				    id: description
				    attributes:
				      label: What is the issue you are experiencing?
				      placeholder: A clear and concise description of what the bug is.
				    validations:
				      required: true
				  - type: textarea
				    id: reproduction
				    attributes:
				      label: Steps to Reproduce (or failing test case)
				      placeholder: 1) ... 2) ... 3) ...
				    validations:
				      required: true
				  - type: textarea
				    id: version
				    attributes:
				      label: Package Version
				      placeholder: e.g. v0.1.1
				
			feature_request.yml:  (type=file)
				name: Feature Request
				description: "Submit a new feature request"
				title: "YOUR DESCRIPTIVE TITLE GOES HERE"
				labels: ["feature", "triage"]
				body:
				  - type: checkboxes
				    id: checks
				    attributes:
				      label: First Check
				      description: |
				        Please confirm and check all the following prior to submission. If you do not do this, your
				        issue may be closed.
				      options:
				        - label: I used the GitHub search to find a similar requests and didn't find it.
				          required: true
				  - type: textarea
				    id: problem
				    attributes:
				      label: Please provide a concise description of the problem that would be addressed by this feature.
				    validations:
				      required: true
				  - type: textarea
				    id: solution
				    attributes:
				      label: Please provide a concise description of the feature that would resolve your issue.
				    validations:
				      required: true
				  - type: textarea
				    id: considerations
				    attributes:
				      label: Please consider and list out some caveats or tradeoffs made in your design decision
				    validations:
				      required: true
				  - type: checkboxes
				    id: additional-information
				    attributes:
				      label: Additional Information
				      options:
				        - label: If this is accepted I'm willing to submit a PR to provide this feature
				        - label: If this is accepted I'm willing to help maintain this feature
				
		PULL_REQUEST_TEMPLATE.md:  (type=file)
			Fixes #
			
			## Purpose
			
			## Proposed Changes
			
			  -
			  -
			  -
			
			## Checklist
			
			- [ ] I have added tests that prove my fix is effective or that my feature works
			- [ ] I have added necessary documentation (if appropriate)
		release-drafter.yml:  (type=file)
			---
			name-template: "v$RESOLVED_VERSION"
			tag-template: "v$RESOLVED_VERSION"
			change-template: "- $TITLE @$AUTHOR (#$NUMBER)"
			sort-direction: ascending
			
			categories:
			  - title: "🚨 Breaking changes"
			    labels:
			      - "breaking-change"
			      - "major"
			  - title: "✨ New features"
			    labels:
			      - "feature"
			      - "minor"
			  - title: "🐛 Bug fixes"
			    labels:
			      - "bugfix"
			  - title: "🧰 Maintenance"
			    collapse-after: 3
			    labels:
			      - "ci"
			      - "chore"
			  - title: "📚 Documentation"
			    labels:
			      - "documentation"
			  - title: "⬆️ Dependency updates"
			    collapse-after: 3
			    labels:
			      - "dependencies"
			
			exclude-labels:
			  - "skip-changelog"
			
			version-resolver:
			  major:
			    labels:
			      - "major"
			      - "breaking-change"
			  minor:
			    labels:
			      - "minor"
			      - "feature"
			  patch:
			    labels:
			      - "bugfix"
			      - "chore"
			      - "ci"
			      - "dependencies"
			      - "documentation"
			  default: patch
			
			autolabeler:
			  - label: "documentation"
			    files:
			      - "*.md"
			    branch:
			      - '/docs{0,1}\/.+/'
			  - label: "bugfix"
			    title:
			      - "/fix: .+/i"
			      - "/bug: .+/i"
			    branch:
			      - '/fix\/.+/'
			      - '/bug\/.+/'
			  - label: "feature"
			    title:
			      - "/feat: .+/i"
			    branch:
			      - '/feature\/.+/'
			      - '/feat\/.+/'
			    body:
			      - '/implements #\d+/i'
			  - label: "breaking-change"
			    title:
			      - "/breaking change: .+/i"
			
			template: |
			  ## Changes
			
			  $CHANGES
			
		workflows:  (type=dir)
			partial-tests.yml:  (type=file)
				name: Go Build/Test
				
				on:
				  workflow_call:
				
				jobs:
				  Go:
				    runs-on: ubuntu-latest
				    steps:
				      - uses: actions/checkout@v3
				
				      - name: Set up Go
				        uses: actions/setup-go@v3
				        with:
				          go-version-file: 'go.mod'
				          cache: true
				
				      - name: golangci-lint
				        uses: golangci/golangci-lint-action@v3
				        with:
				          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
				          version: latest
				          args: --timeout=6m
				
				      - name: Build
				        run: go build ./...
				
				      - name: Test
				        run: go test ./... -race
				
			pr.yml:  (type=file)
				name: pr
				
				on:
				  push:
				    branches:
				      - main
				  pull_request:
				    branches:
				      - main
				
				jobs:
				  backend-tests:
				    name: "Go Build/Test"
				    uses: ./.github/workflows/partial-tests.yml
				
			publish.yml:  (type=file)
				name: Build and Publish
				
				permissions:
				  contents: write # for release
				  pages: write
				  id-token: write
				
				on:
				  workflow_dispatch:
				    inputs:
				      semverbump:
				        description: "Which version to bump by"
				        required: true
				        default: "patch"
				        type: choice
				        options:
				          - patch
				          - minor
				          - major
				
				jobs:
				  backend-tests:
				    name: "Go Build/Test"
				    uses: ./.github/workflows/partial-tests.yml
				
				  tag:
				    name: "Publish Tag"
				    runs-on: ubuntu-latest
				    needs:
				      - backend-tests
				    steps:
				      - uses: actions/checkout@v4
				
				      - uses: actions-ecosystem/action-get-latest-tag@v1
				        id: get-latest-tag
				
				      - uses: actions-ecosystem/action-bump-semver@v1
				        id: bump-semver
				        with:
				          current_version: ${{ steps.get-latest-tag.outputs.tag }}
				          level: ${{ inputs.semverbump }}
				
				      - uses: actions-ecosystem/action-push-tag@v1
				        with:
				          tag: ${{ steps.bump-semver.outputs.new_version }}
				          message: "${{ steps.bump-semver.outputs.new_version }}: PR #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}"
				
				  goreleaser:
				    name: "Release"
				    needs:
				      - backend-tests
				    runs-on: ubuntu-latest
				    steps:
				      - uses: actions/checkout@v4
				        with:
				          fetch-depth: 0
				      - run: git fetch --force --tags
				      - uses: actions/setup-go@v5
				        with:
				          go-version-file: "go.mod"
				          cache: true
				      - uses: goreleaser/goreleaser-action@v6
				        with:
				          distribution: goreleaser
				          version: latest
				          args: release --clean
				        env:
				          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
				
			release-drafter.yml:  (type=file)
				name: Release Drafter
				
				on:
				  push:
				    # branches to consider in the event; optional, defaults to all
				    branches:
				      - main
				  # pull_request event is required only for autolabeler
				  pull_request:
				    # Only following types are handled by the action, but one can default to all as well
				    types: [opened, reopened, synchronize]
				  # pull_request_target event is required for autolabeler to support PRs from forks
				  # pull_request_target:
				  #   types: [opened, reopened, synchronize]
				
				permissions:
				  contents: read
				
				jobs:
				  update_release_draft:
				    permissions:
				      # write permission is required to create a github release
				      contents: write
				      # write permission is required for autolabeler
				      # otherwise, read permission is required at least
				      pull-requests: write
				    runs-on: ubuntu-latest
				    steps:
				      # (Optional) GitHub Enterprise requires GHE_HOST variable set
				      #- name: Set GHE_HOST
				      #  run: |
				      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV
				
				      # Drafts your next Release notes as Pull Requests are merged into "main"
				      - uses: release-drafter/release-drafter@v6
				        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
				        # with:
				        #   config-name: my-config.yml
				        #   disable-autolabeler: true
				        env:
				          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
				
	.gitignore:  (type=file)
		# If you prefer the allow list template instead of the deny list, see community template:
		# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
		#
		# Binaries for programs and plugins
		*.exe
		*.exe~
		*.dll
		*.so
		*.dylib
		
		# Test binary, built with `go test -c`
		*.test
		
		# Output of the go coverage tool, specifically when used with LiteIDE
		*.out
		
		# Dependency directories (remove the comment below to include it)
		# vendor/
		
		# Go workspace file
		go.work
		dist/
		
	.golanci.yml:  (type=file)
		run:
		  timeout: 5m
		linters-settings:
		  goconst:
		    min-len: 5
		    min-occurrences: 5
		  exhaustive:
		    default-signifies-exhaustive: true
		  revive:
		    ignore-generated-header: false
		    severity: warning
		    confidence: 3
		  depguard:
		    rules:
		      main:
		        deny:
		          - pkg: io/util
		            desc: |
		              Deprecated: As of Go 1.16, the same functionality is now provided by
		              package io or package os, and those implementations should be
		              preferred in new code. See the specific function documentation for
		              details.
		          - pkg: github.com/pkg/errors
		            desc: Should be replaced by standard lib errors package
		  gocritic:
		    enabled-checks:
		      - ruleguard
		  testifylint:
		    enable-all: true
		  tagalign:
		    order:
		      - json
		      - schema
		      - yaml
		      - yml
		      - toml
		      - validate
		linters:
		  disable-all: true
		  enable:
		    - asciicheck
		    - bodyclose
		    - depguard
		    - dogsled
		    - errcheck
		    - errorlint
		    - exhaustive
		    - gochecknoinits
		    - goconst
		    - gocritic
		    - gocyclo
		    - goprintffuncname
		    - gosimple
		    - govet
		    - ineffassign
		    - misspell
		    - nakedret
		    - revive
		    - staticcheck
		    - stylecheck
		    - tagalign
		    - testifylint
		    - typecheck
		    - typecheck
		    - unconvert
		    - unused
		    - whitespace
		    - zerologlint
		issues:
		  exclude-use-default: false
		  fix: true
		
	.goreleaser.yml:  (type=file)
		# This is an example .goreleaser.yml file with some sensible defaults.
		# Make sure to check the documentation at https://goreleaser.com
		version: 2
		before:
		  hooks:
		    - go mod tidy
		
		builds:
		  - env:
		      - CGO_ENABLED=0
		    goos:
		      - linux
		      - windows
		      - darwin
		    goarch:
		      - amd64
		      - arm
		      - arm64
		    goarm:
		      - "7"
		
		archives:
		  - formats: [tar.gz]
		    # this name template makes the OS and Arch compatible with the results of uname.
		    name_template: >-
		      {{ .ProjectName }}_
		      {{- title .Os }}_
		      {{- if eq .Arch "amd64" }}x86_64
		      {{- else if eq .Arch "386" }}i386
		      {{- else }}{{ .Arch }}{{ end }}
		      {{- if .Arm }}v{{ .Arm }}{{ end }}
		    # use zip for windows archives
		    format_overrides:
		      - goos: windows
		        formats: [zip]
		
		checksum:
		  name_template: "checksums.txt"
		
		snapshot:
		  version_template: "{{ incpatch .Version }}-next"
		
		changelog:
		  sort: asc
		  filters:
		    exclude:
		      - "^docs:"
		      - "^test:"
		
		
		brews:
		  - repository:
		      owner: "hay-kot"
		      name: "homebrew-scaffold-go-cli-tap"
		    description: "A new project"
		    license: "MIT license"
		    dependencies:
		      - name: go
		        type: optional
		      - name: git
		    test: |
		      system "#{bin}/project version"
		
		
		
		dockers:
		  - use: buildx
		    goos: linux
		    goarch: arm
		    goarm: 7
		    image_templates:
		      - "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}-armv7"
		      - "ghcr.io/hay-kot/scaffold-go-cli:latest-armv7"
		    build_flag_templates:
		      - "--platform=linux/arm/v7"
		      - "--pull"
		      - "--label=org.opencontainers.image.created={{.Date}}"
		      - "--label=org.opencontainers.image.title={{.ProjectName}}"
		      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
		      - "--label=org.opencontainers.image.version=v{{.Version}}"
		
		  - use: buildx
		    goos: linux
		    goarch: arm64
		    image_templates:
		      - "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}-arm64"
		      - "ghcr.io/hay-kot/scaffold-go-cli:latest-arm64"
		    build_flag_templates:
		      - "--platform=linux/arm64"
		      - "--pull"
		      - "--label=org.opencontainers.image.created={{.Date}}"
		      - "--label=org.opencontainers.image.title={{.ProjectName}}"
		      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
		      - "--label=org.opencontainers.image.version=v{{.Version}}"
		
		  - use: buildx
		    goos: linux
		    goarch: amd64
		    image_templates:
		      - "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}-amd64"
		      - "ghcr.io/hay-kot/scaffold-go-cli:latest-amd64"
		    build_flag_templates:
		      - "--platform=linux/amd64"
		      - "--pull"
		      - "--label=org.opencontainers.image.created={{.Date}}"
		      - "--label=org.opencontainers.image.title={{.ProjectName}}"
		      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
		      - "--label=org.opencontainers.image.version=v{{.Version}}"
		
		docker_manifests:
		  - name_template: "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}"
		    image_templates:
		      - "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}-amd64"
		      - "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}-arm64"
		      - "ghcr.io/hay-kot/scaffold-go-cli:v{{ .Version }}-armv7"
		  - name_template: "ghcr.io/hay-kot/scaffold-go-cli:latest"
		    image_templates:
		      - "ghcr.io/hay-kot/scaffold-go-cli:latest-amd64"
		      - "ghcr.io/hay-kot/scaffold-go-cli:latest-arm64"
		      - "ghcr.io/hay-kot/scaffold-go-cli:latest-armv7"
		
		
		#
		#--------------------------------------------------------------------------------------------------
		# Meta
		#
		# The lines beneath this are called `modelines`. See `:help modeline`
		# Feel free to remove those if you don't want/use them.
		# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
		# vim: set ts=2 sw=2 tw=0 fo=cnqoj
		
	Dockerfile:  (type=file)
		FROM gcr.io/distroless/static
		ENTRYPOINT ["project"]
		COPY project /
		
	LICENSE:  (type=file)
		MIT License
		
		Copyright (c) 2025-02-16, John Doe
		
		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:
		
		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.
		
		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
		
	README.md:  (type=file)
		# cli-test
		
		A new project
		
		## Installation
		
		```bash
		go install github.com/username/project
		```
		
		## Usage
		
		TODO
		
	go.mod:  (type=file)
		module github.com/username/project
		
		go 1.24
		
		require (
			github.com/rs/zerolog v1.33.0
			github.com/urfave/cli/v3 v3.0.0-beta1
		)
		
		require (
			github.com/mattn/go-colorable v0.1.14 // indirect
			github.com/mattn/go-isatty v0.0.20 // indirect
			golang.org/x/sys v0.30.0 // indirect
		)
		
	go.sum:  (type=file)
		github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
		github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
		github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
		github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
		github.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=
		github.com/mattn/go-colorable v0.1.14 h1:9A9LHSqF/7dyVVX6g0U9cwm9pG3kP9gSzcuIPHPsaIE=
		github.com/mattn/go-colorable v0.1.14/go.mod h1:6LmQG8QLFO4G5z1gPvYEzlUgJ2wF+stgPZH1UqBm1s8=
		github.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=
		github.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
		github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
		github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
		github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
		github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
		github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
		github.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=
		github.com/rs/zerolog v1.33.0 h1:1cU2KZkvPxNyfgEmhHAz/1A9Bz+llsdYzklWFzgp0r8=
		github.com/rs/zerolog v1.33.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=
		github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
		github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
		github.com/urfave/cli/v3 v3.0.0-beta1 h1:6DTaaUarcM0wX7qj5Hcvs+5Dm3dyUTBbEwIWAjcw9Zg=
		github.com/urfave/cli/v3 v3.0.0-beta1/go.mod h1:FnIeEMYu+ko8zP1F9Ypr3xkZMIDqW3DR92yUtY39q1Y=
		golang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
		golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
		golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
		golang.org/x/sys v0.30.0 h1:QjkSwP/36a20jFYWkSue1YwXzLmsV5Gfq7Eiy72C1uc=
		golang.org/x/sys v0.30.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
		gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
		gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
		
	internal:  (type=dir)
		commands:  (type=dir)
			controller.go:  (type=file)
				// Package commands contains the CLI commands for the application
				package commands
				
				import (
					"fmt"
				
					"context"
				)
				
				type Flags struct {
					LogLevel         string
				}
				
				type Controller struct {
					Flags *Flags
				}
				
				
				func (c *Controller) Hello(ctx context.Context) error {
					fmt.Println("Hello World!")
					return nil
				}
				
				func (c *Controller) Goodbye(ctx context.Context) error {
					fmt.Println("Hello World!")
					return nil
				}
				
				
	main.go:  (type=file)
		package main
		
		import (
			"context"
			"fmt"
			"os"
		
			"github.com/rs/zerolog"
			"github.com/rs/zerolog/log"
			"github.com/urfave/cli/v3"
		
			"github.com/username/project/internal/commands"
		)
		
		var (
			// Build information. Populated at build-time via -ldflags flag.
			version = "dev"
			commit  = "HEAD"
			date    = "now"
		)
		
		func build() string {
			short := commit
			if len(commit) > 7 {
				short = commit[:7]
			}
		
			return fmt.Sprintf("%s (%s) %s", version, short, date)
		}
		
		func main() {
			ctrl := &commands.Controller{
				Flags: &commands.Flags{},
			}
		
			log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
		
			app := &cli.Command{
				Name:    "cli-test",
				Usage:   `A new project`,
				Version: build(),
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "log-level",
						Usage:   "log level (debug, info, warn, error, fatal, panic)",
						Sources: cli.EnvVars("LOG_FORMAT"),
						Value:   "panic",
					},
				},
				Before: func(ctx context.Context, c *cli.Command) (context.Context, error) {
					level, err := zerolog.ParseLevel(c.String("log-level"))
					if err != nil {
						return ctx, fmt.Errorf("failed to parse log level: %w", err)
					}
		
					log.Logger = log.Level(level)
		
					return ctx, nil
				},
				Commands: []*cli.Command{
					{
						Name:  "hello",
						Usage: "",
						Action: func(ctx context.Context, c *cli.Command) error {
							return ctrl.Hello(ctx)
						},
					},
					{
						Name:  "goodbye",
						Usage: "",
						Action: func(ctx context.Context, c *cli.Command) error {
							return ctrl.Goodbye(ctx)
						},
					},
				},
			}
		
			ctx := context.Background()
		
			if err := app.Run(ctx, os.Args); err != nil {
				log.Fatal().Err(err).Msg("failed to run cli-test")
			}
		}
		
	renovate.json:  (type=file)
		{
		    "$schema": "https://docs.renovatebot.com/renovate-schema.json",
		    "extends": [
		        "config:base"
		    ],
		    "postUpdateOptions": [
		        "gomodTidy"
		    ]
		}
	taskfile.yml:  (type=file)
		version: "3"
		
		env:
		  LOG_LEVEL: "debug"
		
		tasks:
		  run:
		    desc: Runs the main application and supports passing CLI args
		    cmds:
		      - go run *.go {{ .CLI_ARGS }}
		    silent: false
		
		  build:
		    desc: Builds the backend binary
		    cmds:
		      - goreleaser build --snapshot --clean
		
		  test:
		    desc: Runs all go tests using gotestsum - supports passing gotestsum args
		    cmds:
		      - gotestsum {{ .CLI_ARGS }} ./...
		
		  test:watch:
		    desc: Runs all go tests using gotestsum in watch mode
		    cmds:
		      - gotestsum --watch -- -v ./...
		
		  coverage:
		    desc: Runs all go tests with -race flag and generates a coverage report
		    cmds:
		      - go test -race -coverprofile=coverage.out -covermode=atomic ./... -v -cover
		    silent: true
		
		  tidy:
		    desc: Runs go mod tidy on the backend
		    cmds:
		      - go mod tidy
		
		  lint:
		    desc: Runs golangci-lint
		    cmds:
		      - golangci-lint run ./...
		
		  pr:
		    desc: Runs all go test and lint related tasks for PRs
		    cmds:
		      - task: tidy
		      - task: lint
		      - task: test
		

